#!/bin/bash
# Installation compl√®te avec v√©rifications pour Mac M2 Pro

set -e  # Arr√™ter en cas d'erreur

echo "======================================================"
echo "  INSTALLATION NER - MAC M2 PRO"
echo "======================================================"
echo ""

# V√©rifier architecture
echo "[1/10] V√©rification de l'architecture..."
if [[ $(uname -m) != "arm64" ]]; then
    echo "‚ùå Ce script n√©cessite Apple Silicon (M1/M2/M3)"
    exit 1
fi
echo "  ‚úì Architecture: arm64 (Apple Silicon)"

# V√©rifier version macOS
echo ""
echo "[2/10] V√©rification macOS..."
macos_version=$(sw_vers -productVersion)
echo "  ‚úì macOS version: $macos_version"

if [[ "$macos_version" < "12.3" ]]; then
    echo "  ‚ö†Ô∏è  MPS n√©cessite macOS 12.3+. Mise √† jour recommand√©e."
fi

# V√©rifier Python
echo ""
echo "[3/10] V√©rification Python..."
if ! command -v python3 &> /dev/null; then
    echo "Python3 non trouv√©. Installez avec: brew install python3"
    exit 1
fi
python_version=$(python3 --version)
echo "  ‚úì $python_version"

# Cr√©er environnement virtuel
#echo ""
####echo "  ‚úì Environnement 'ner_env' cr√©√© et activ√©"

# Upgrade pip
echo ""
echo "[5/10] Mise √† jour de pip..."
pip install --upgrade pip --quiet
echo "  ‚úì pip mis √† jour"

# Installer PyTorch avec MPS
echo ""
echo "[6/10] Installation PyTorch (avec support MPS)..."
pip install torch torchvision torchaudio --quiet
echo "  ‚úì PyTorch install√©"

# V√©rifier MPS
echo ""
echo "[7/10] V√©rification support MPS..."
python3 -c "import torch; print('  ‚úì MPS disponible' if torch.backends.mps.is_available() else '  ‚ö†Ô∏è  MPS non disponible')"

# Installer Spacy
echo ""
echo "[8/10] Installation Spacy + mod√®les..."
pip install spacy --quiet
python3 -m spacy download en_core_web_sm --quiet
python3 -m spacy download en_core_web_md --quiet
python3 -m spacy download en_core_web_lg --quiet
echo "  ‚úì Spacy et 3 mod√®les install√©s"

# Installer Flair
echo ""
echo "[9/10] Installation Flair..."
pip install flair --quiet
echo "  ‚úì Flair install√©"

# Installer Transformers
echo ""
echo "[10/10] Installation Transformers..."
pip install transformers accelerate --quiet
echo "  ‚úì Transformers install√©"

# Installer utilitaires
echo ""
echo "[11/10] Installation utilitaires..."
pip install numpy pandas scikit-learn matplotlib seaborn tqdm --quiet
echo "  ‚úì Utilitaires install√©s"

# Installer Ollama
echo ""
echo "[12/10] V√©rification Ollama..."
if ! command -v ollama &> /dev/null; then
    echo "  ‚è≥ Installation Ollama..."
    curl -fsSL https://ollama.com/install.sh | sh
    echo "  ‚úì Ollama install√©"
else
    echo "  ‚úì Ollama d√©j√† install√©"
fi

# T√©l√©charger mod√®les LLM
echo ""
echo "[13/10] T√©l√©chargement des mod√®les LLM..."
echo "  (Cela peut prendre 5-10 minutes selon votre connexion)"

echo "  ‚Üí llama3.2:3b (1.6 GB)..."
ollama pull llama3.2:3b 2>&1 | grep -E "success|error" || true

echo "  ‚Üí mistral:7b (4.1 GB)..."
ollama pull mistral:7b 2>&1 | grep -E "success|error" || true

echo "  ‚Üí llama3.1:8b (4.7 GB)..."
ollama pull llama3.1:8b 2>&1 | grep -E "success|error" || true

echo "  ‚úì Mod√®les LLM t√©l√©charg√©s"

# R√©sum√©
echo ""
echo "======================================================"
echo "  ‚úÖ INSTALLATION TERMIN√âE!"
echo "======================================================"
echo ""
echo "üì¶ Packages install√©s:"
echo "  - PyTorch (avec MPS)"
echo "  - Spacy (sm, md, lg)"
echo "  - Flair"
echo "  - Transformers"
echo "  - Ollama + 3 mod√®les LLM"
#echo ""
#echo "üß™ Lancer le test:"
#echo "  source ner_env/bin/activate"
#echo "  python3 test_mps.py"
#echo ""
echo "üöÄ Lancer les exp√©riences:"
echo "  ./run_all_tests.sh"
echo ""
echo "======================================================"